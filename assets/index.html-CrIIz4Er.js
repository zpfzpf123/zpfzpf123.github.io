import{_ as i,e as a,f as e,o as n}from"./app-CflHQ2lS.js";const t={};function l(r,s){return n(),a("div",null,s[0]||(s[0]=[e(`<p>本部分内容介绍了如何使用 <code>PerformanceObserver</code> 来监听网页中是否调用了特定接口的相关代码及使用说明。</p><h2 id="代码部分" tabindex="-1"><a class="header-anchor" href="#代码部分"><span>代码部分</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 创建一个 PerformanceObserver 实例，该实例用于观察性能相关的事件</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 传入的回调函数会在有新的性能条目符合观察条件时被调用</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> observer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> PerformanceObserver</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // performance.getEntriesByName 方法用于获取指定名称的性能条目数组</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 这里通过判断名称为 &quot;接口ip&quot; 的性能条目数组的长度是否大于 0</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 来确定网页是否调用了该接口</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">performance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getEntriesByName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">接口ip</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">       .</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &gt;</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">        0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 如果长度大于 0，说明网页调用了该接口，打印相应提示信息</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">网页调用该接口</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 配置 observer 观察的性能条目类型为 &quot;resource&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// &quot;resource&quot; 类型表示观察与资源加载相关的性能条目，如接口调用等</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">observer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">observe</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    entryTypes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">resource</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="涉及的对象和方法说明" tabindex="-1"><a class="header-anchor" href="#涉及的对象和方法说明"><span>涉及的对象和方法说明</span></a></h2><h3 id="performanceobserver-对象" tabindex="-1"><a class="header-anchor" href="#performanceobserver-对象"><span><code>PerformanceObserver</code> 对象</span></a></h3><table><thead><tr><th>说明</th><th>描述</th></tr></thead><tbody><tr><td>构造函数</td><td><code>new PerformanceObserver(callback)</code>，接受一个回调函数作为参数，当有新的性能条目符合观察条件时，该回调函数会被调用</td></tr><tr><td>方法</td><td><code>observe(options)</code>，用于配置观察的条件，<code>options</code> 是一个对象，其中 <code>entryTypes</code> 是一个数组，指定要观察的性能条目类型，如 <code>[&quot;resource&quot;]</code> 表示观察资源相关的性能条目</td></tr></tbody></table><h3 id="performance-对象" tabindex="-1"><a class="header-anchor" href="#performance-对象"><span><code>performance</code> 对象</span></a></h3><table><thead><tr><th>说明</th><th>描述</th></tr></thead><tbody><tr><td>方法</td><td><code>performance.getEntriesByName(name)</code>，接受一个字符串参数 <code>name</code>，返回一个包含指定名称的性能条目的数组，这里用于获取名称为 &quot;接口ip&quot; 的性能条目数组来判断接口是否被调用</td></tr></tbody></table><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><ol><li>上述代码中 <code>performance.getEntriesByName(&quot;接口ip&quot;)</code> 中的 <code>&quot;接口ip&quot;</code> 需要根据实际的接口名称进行准确填写，否则可能无法正确判断接口是否被调用。</li><li><code>PerformanceObserver</code> 主要用于观察性能相关的事件，通过观察 <code>resource</code> 类型的性能条目来判断接口调用情况，在实际应用中，可能还需要结合其他方式进行更准确的判断和处理。</li></ol><p>希望通过以上文档内容，你能清晰理解如何使用 <code>PerformanceObserver</code> 来监听网页中特定接口的调用情况。</p>`,11)]))}const p=i(t,[["render",l],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/article/ms3ql3ad/","title":"监听网页行为","lang":"zh-CN","frontmatter":{"title":"监听网页行为","createTime":"2025/02/26 13:39:17","tags":["前端","js","网页监听"],"permalink":"/article/ms3ql3ad/"},"headers":[],"readingTime":{"minutes":2.07,"words":620},"git":{"updatedTime":1740733198000,"contributors":[{"name":"18582297328","username":"18582297328","email":"2622013323@qq.com","commits":3,"avatar":"https://avatars.githubusercontent.com/18582297328?v=4","url":"https://github.com/18582297328"}]},"filePathRelative":"前端/js/监听网页行为.md","categoryList":[{"id":"9abfe4","sort":10000,"name":"前端"},{"id":"2b656f","sort":10003,"name":"js"}]}');export{p as comp,d as data};
